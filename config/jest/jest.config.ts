/*
 * Подробное объяснение каждого параметра конфигурации и проверка типов:
 * https://jestjs.io/docs/configuration
 */

const path = require('path');

export default {
  globals: {
    __IS_DEV__: true,
    __API__: '',
    __PROJECT__: 'jest',
  },

  // Все импортированные модули ваших тестов должны быть автоматически замоканы
  // automock: false,

  // Прекратить выполнение тестов после `n` неудачных попыток
  // bail: 0,

  // Каталог, в котором Jest должен хранить информацию о кэше зависимостей
  // cacheDirectory: "C:\\Users\\Astropsych\\AppData\\Local\\Temp\\jest",

  clearMocks: true,
  testEnvironment: 'jsdom',
  coveragePathIgnorePatterns: ['\\\\node_modules\\\\'],

  // Указывает, следует ли собирать информацию о покрытии кода во время выполнения тестов
  // collectCoverage: false,

  // Массив шаблонов глобин, указывающих набор файлов, для которых следует собирать информацию о покрытии кода
  // collectCoverageFrom: undefined,

  // Каталог, в котором Jest должен сохранять файлы с информацией о покрытии кода
  // coverageDirectory: undefined,

  // Массив регулярных выражений, используемых для пропуска сбора информации о покрытии кода

  // Указывает, какой инструментарий должен использоваться для инструментирования кода для сбора информации о покрытии
  // coverageProvider: "babel",

  // Список имен репортеров, которые использует Jest для записи отчетов о покрытии кода
  // coverageReporters: [
  //   "json",
  //   "text",
  //   "lcov",
  //   "clover"
  // ],

  // Объект, который настраивает минимальные пороги для результатов покрытия кода
  // coverageThreshold: undefined,

  // Путь к пользовательскому извлекателю зависимостей
  // dependencyExtractor: undefined,

  // При вызове устаревших API генерировать полезные сообщения об ошибках
  // errorOnDeprecated: false,

  // Принудительно собирать информацию о покрытии кода из игнорируемых файлов с использованием массива шаблонов глобин
  // forceCoverageMatch: [],

  // Путь к модулю, который экспортирует асинхронную функцию, которая запускается перед всеми тестовыми наборами
  // globalSetup: undefined,

  // Путь к модулю, который экспортирует асинхронную функцию, которая запускается после всех тестовых наборов
  // globalTeardown: undefined,

  // Максимальное количество рабочих процессов, используемых для выполнения тестов.
  // Может быть указано в процентах или числе. Например, maxWorkers: "50%" будет использовать 50% от количества вашего процессора + 1 в качестве максимального числа рабочих процессов. maxWorkers: 2 будет использовать максимум 2 рабочих процесса.
  // maxWorkers: "50%",

  // Массив имен директорий, которые должны искаться рекурсивно относительно директории модуля, который их вызывает
  moduleDirectories: ['node_modules'],

  modulePaths: ['<rootDir>src'],

  // Массив расширений файлов, которые используются в ваших модулях
  moduleFileExtensions: ['js', 'jsx', 'ts', 'tsx', 'json', 'node'],
  // Шаблоны глобин, используемые Jest для обнаружения файлов с тестами
  testMatch: ['<rootDir>src/**/*(*.)@(spec|test).[tj]s?(x)'],
  // Корневая директория, которую Jest должен сканировать на предмет тестов и модулей
  rootDir: '../../',
  setupFilesAfterEnv: ['<rootDir>config/jest/setupTests.ts'],
  moduleNameMapper: {
    '\\.s?css$': 'identity-obj-proxy',
    '\\.svg': path.resolve(__dirname, 'jestEmptyComponent.tsx'),
    '^@/(.*)$': '<rootDir>src/$1',
  },

  reporters: [
    'default',
    [
      'jest-html-reporters',
      {
        publicPath: '<rootDir>/reports/unit',
        filename: 'report.html',
        openReport: true,
        inlineSource: true,
      },
    ],
  ],

  // Карта из регулярных выражений в имена модулей или массивов имен модулей, которые позволяют подменить ресурсы с помощью одного модуля
  // moduleNameMapper: {},

  // Массив регулярных выражений, сопоставляемых со всеми путями модулей перед тем, как они станут "видимыми" для загрузчика модулей
  // modulePathIgnorePatterns: [],

  // Включает уведомления о результатах тестов
  // notify: false,

  // Перечисление, указывающее режим уведомлений. Требует { notify: true }
  // notifyMode: "failure-change",

  // Пресет, используемый как базовая конфигурация для Jest
  // preset: undefined,

  // Запускать тесты из одного или нескольких проектов
  // projects: undefined,

  // Используйте эту опцию конфигурации, чтобы добавить пользовательские репортеры в Jest
  // reporters: undefined,

  // Автоматически сбрасывать состояние мока перед каждым тестом
  // resetMocks: false,

  // Сбросить реестр модулей перед выполнением каждого отдельного теста
  // resetModules: false,

  // Путь к пользовательскому разрешителю путей
  // resolver: undefined,

  // Автоматически восстанавливать состояние мока и реализацию перед каждым тестом
  // restoreMocks: false,

  // Список путей к директориям, в которых Jest должен искать файлы
  // roots: [
  //   "<rootDir>"
  // ],

  // Позволяет использовать пользовательский средство запуска вместо стандартного средства запуска тестов Jest
  // runner: "jest-runner",

  // Пути к модулям, которые запускают некоторый код для настройки или установки среды тестирования перед каждым тестом
  // setupFiles: [],

  // Список путей к модулям, которые запускают некоторый код для настройки или установки тестового фреймворка перед каждым тестом
  // setupFilesAfterEnv: [],

  // Количество секунд, после которых тест считается медленным и выводится таковым в результатах.
  // slowTestThreshold: 5,

  // Список путей к модулям сериализаторов снимков, которые Jest должен использовать для тестирования снимков
  // snapshotSerializers: [],

  // Параметры, которые будут переданы в testEnvironment
  // testEnvironmentOptions: {},

  // Добавляет поле местоположения в результаты тестов
  // testLocationInResults: false,

  // Массив регулярных выражений, которые сопоставляются со всеми путями тестовых файлов, совпадающие тесты будут пропущены
  // testPathIgnorePatterns: [
  //   "\\\\node_modules\\\\"
  // ],

  // Регулярное выражение или массив шаблонов, которые Jest использует для обнаружения тестовых файлов
  // testRegex: [],

  // Эта опция позволяет использовать пользовательский процессор результатов
  // testResultsProcessor: undefined,

  // Эта опция позволяет использовать пользовательский тестовый запускник
  // testRunner: "jest-circus/runner",

  // Эта опция задает URL для среды jsdom. Она отображается в свойствах, таких как location.href
  // testURL: "http://localhost",

  // Установка этого значения на "fake" позволяет использовать фейковые таймеры для функций, таких как "setTimeout"
  // timers: "real",

  // Карта из регулярных выражений в пути к трансформаторам
  // transform: undefined,

  // Массив регулярных выражений, сопоставляемых со всеми путями исходных файлов, совпадающие файлы будут пропущены при трансформации
  // transformIgnorePatterns: [
  //   "\\\\node_modules\\\\",
  //   "\\.pnp\\.[^\\\\]+$"
  // ],

  // Массив регулярных выражений, сопоставляемых со всеми модулями перед тем, как загрузчик модулей автоматически вернет для них подделку
  // unmockedModulePathPatterns: undefined,

  // Указывает, должен ли каждый отдельный тест сообщать о своем выполнении во время выполнения
  // verbose: undefined,

  // Массив регулярных выражений, которые сопоставляются со всеми путями исходных файлов перед повторным запуском тестов в режиме отслеживания
  // watchPathIgnorePatterns: [],

  // Использовать watchman для обхода файлов
  // watchman: true,
};
